summary(logShuttle)
mutate(mydata, V10 = 0)
View(mydata)
mydata <- mutate(mydata, V10 = 0)
mydata <- mutate(mydata, V10 = 1- V9)
View(mydata)
logShuttle <- glm(mydata$useBin ~ mydata$V10, family = "binomial")
summary(logShuttle)
1/0.03181
logShuttle <- glm(mydata$useBin ~ mydata$V9 + magn, family = "binomial")
logShuttle <- glm(mydata$useBin ~ mydata$V9 + mydata$magn, family = "binomial")
summary(logShuttle)
summary(exp(logShuttle))
exp(logShuttle$coefficients)
data("InsectSprays")
rm logShuttle
rm(logShuttle)
rm(mydata)
rm(shuttle)
rm(plot2)
InsectSprays
View(InsectSprays)
glm2 <- glm(InsectSprays$count ~ InsectSprays$spray, data = InsectSprays)
summary(glm2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y)
lines(x, yhat)
summary(yhat)
glm2
14.5/.8333
summary(InsectSprays)
str(InsectSprays)
anova(InsectSprays)
glm2 <- glm(InsectSprays$count ~ InsectSprays$spray, data = InsectSprays, family = poisson)
glm2
2.67415/0.05588
0.05588/2.67415
logglm2 <- log(glm2)
plot(InsectSprays)
plot(InsectSprays$spray, InsectSprays$count)
lines(InsectSprays$spray, glm2$fitted, col = "blue")
exp(2.67415 + 0.05588)
exp(2.67415)
14.50002/15.33335
xnew <- seq(0,10)
xnew <- seq(1,10)
library(MASS)
data(shuttle)
shuttle
View(shuttle)
model <- glm(shuttle$use ~ shuttle$wind, family = "binomial")
summary(model)
model <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = "binomial")
summary(model)
-3.635e-01/-3.201e-02
-3.201e-02/-3.635e-01
-0.25131/-0.03181
plot(shuttle$auto, model$fitted)
model$fitted.values
plot(shuttle$auto, model$fitted.values)
length(model$fitted.values)
length(shuttle$auto)
shuttle$auto
shuttle
plot(shuttle$use, model$fitted.values)
exp(confint(model))
0.3945390/0.5893212
1.207581/1.591081
exp(model$coefficients)
0.6952323/0.9684981
model <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = "binomial")
exp(model$coefficients)
model$coefficients
-3.635093e-01/-3.200873e-02
0.6952323/0.9684981
shuttle$wind == auto
shuttle[shuttle$wind == auto]
shuttle[shuttle$wind == 'auto']
shuttle[shuttle$wind == "auto"]
shuttle[shuttle$wind == "auto"] <- 1
shuttle[shuttle$use == "auto"] <- 1
View(shuttle)
shuttle[shuttle$use == auto] <- 1
shuttle$use == auto
shuttle$use == 'auto'
shuttle[shuttle$use == 'auto'] <- 1
shuttle[1,5]
shuttle[shuttle$use == 'auto',7] <- 1
shuttle[shuttle$use == 'auto',7] <- '1'
data(shuttle)
shuttle[shuttle$use == 'auto',7] <- '1'
shuttle[shuttle$use == 'auto',8] <- '1'
data(shuttle)
model <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = "binomial")
model2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = "binomial")
model <- glm(shuttle$use ~ shuttle$wind, family = "binomial")
exp(coef(model))
exp(coef(model2))
0.7777778/0.9686888
0.6952323/0.9684981
model <- glm(shuttle$use ~ shuttle$wind, family = binomial(link="logit"))
exp(coef(model))
mutate(shuttle, useBINARY = 0)
shuttle[shuttle$use == 'auto',8] <- 1
shuttle[shuttle$use == 'noauto',8] <- 0
model <- glm(shuttle$V8 ~ shuttle$wind, family = binomial(link="logit"))
exp(coef(model))
1.285714/1.032323
1.032323/1.285714
1.285714 / (1 - 1.285714)
modelb <- glm(shuttle$use ~ shuttle$wind, family = binomial(link="logit"))
exp(coef(modelb))
0.7777778/(1-0.7777778)
summary(model)
0.25131/(1-0.25131)
0.25131/0.03181
exp(0.25131/0.03181)
model$coefficients
exp(model$coefficients)
1.285714/1.032323
modelb$coefficients
exp(modelb$coefficients_
)
exp(modelb$coefficients)
0.7777778/0.9686888
summary(model)
(1-0.03181)/0.03181
(0.03181 - 1)/0.03181
exp(0.25131)
exp()
exp(0.03181)
summary(model2)
summary(modelb)
exp(-0.25131)
exp(-0.03181)
modelc <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = binomial(link="logit"))
summary(modelc)
exp(-3.201e-02)
rm(list = ls())
data("mtcars")
mtcars
View(mtcars)
View(mtcars)
?mtcars
plot(mtcars$am, mtcars$mpg)
boxplot(mtcars$am, mtcars$mpg)
plot(mtcars$am, mtcars$mpg)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, xlab =)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, xlab = "Transmission Type", ylab = "MPG")
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, xlab = "Transmission Type", ylab = "MPG", main = "Transmission Type vs MPG")
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, xlab = "Transmission Type", ylab = "MPG", main = "Transmission Type vs MPG", col = mtcars$am)
mtcars <- mutate(mtcars, amLabel = "manual")
mtcars[mtcars$am == 1, 12] <- "auto"
View(mtcars)
getwd()
?mtcars
str(mtcars)
mtcars[mtcars$am == 1,1]
autoMean <- mean(mtcars[mtcars$am == 1,1])
sd(mtcars[mtcars$am == 1,1])
autoStdDev <- sd(mtcars[mtcars$am == 1,1])
manualMean <- mean(mtcars[mtcars$am == 0,1])
manualStdDev <- sd(mtcars[mtcars$am == 1,1])
?sd
manualStdDev <- sd(mtcars[mtcars$am == 0,1])
autoMean <- round(mean(mtcars[mtcars$am == 1,1]),2)
autoMean <- round(mean(mtcars[mtcars$am == 1,1]),2)
autoStdDev <- round(sd(mtcars[mtcars$am == 1,1]),2)
manualMean <- round(mean(mtcars[mtcars$am == 0,1]),2)
manualStdDev <- round(sd(mtcars[mtcars$am == 0,1]),2)
length(mtcars$am == 1])
length(mtcars$am == 1)
length(mtcars$am == '1')
mtcars$am == 1
sum(mtcars$am)
automaticCars <- sum(mtcars$am)
?mtcars
pairs(mtcars)
mymycars <- mtcars
View(mymycars)
mymycars <- mymycars[,1:11]
pairs(mymycars)
pairs(mymycars[,1:6,9])
?mtcars
pairs(mymycars)
?pairs
pairs(mpg, data = mymycars)
pairs(mymycars$mpg, data = mymycars)
pairs(mymycars$mpg ~ , data = mymycars)
pairs(mymycars$mpg ~ ., data = mymycars)
pairs(mpg ~ ., data = mymycars)
pairs(mymycars)
pairs(mymycars[,1])
pairs(mtcars[,1:11])
transVsMpgModel <- glm(mydata$mpg ~ mydata$am, data = mydata)
transVsMpgModel <- glm(mtcars$mpg ~ mtcars$am, data = mtcars)
transVsMpgModel$coefficients
?glm
?poisson
allVsMpgModel <- glm(mtcars$mpg ~ ., family = poisson)
print(summary(allVsMpgModel))
allVsMpgModel <- glm(mtcars$mpg ~ ., family = poisson)
allVsMpgModel <- glm(mpg ~ ., data = mtcars, family = poisson)
summary(allVsMpgModel)
anova(allVsMpgModel)
plot(mtcars$am, allVsMpgModel$fitted)
mtcars <- mtcars[,1:11]
transVsMpgModel <- glm(mpg ~ am, data = mtcars, family = poisson)
anova(allVsMpgModel)
allVsMpgModel <- glm(mpg ~ ., data = mtcars, family = poisson)
anova(allVsMpgModel)
exp(0.3524231)
transVsMpgModel <- glm(mpg ~ am, data = mtcars, family = poisson)
confinf(transVsMpgModel)
confint(transVsMpgModel)
confint(transVsMpgModel)
confint(transVsMpgModel)[1,1]
confint(transVsMpgModel)[1,2]
confint(transVsMpgModel)[1,2]
confint(transVsMpgModel)[2,1]
?axis
?mtcars
transVsMpgModel <- glm(mpg ~ am, data = mtcars, family = poisson)
summary(transVsMpgModel)
transVsMpgModel$coefficients
exp(0.3524231)
install.packages("GGally")
library(GGally)
g = ggpairs(mtcars, lower = list(continuous = "smooth"), params = c(method = "loess") main = "Other Possible Correlations")
g = ggpairs(mtcars, lower = list(continuous = "smooth"), params = c(method = "loess"), main = "Other Possible Correlations")
g = ggpairs(mtcars, lower = list(continuous = "smooth"), params = c(method = "loess"))
g = ggpairs(mtcars, lower = list(continuous = "smooth"), method = "loess")
g
allVsMpgModel$coefficients
allVsMpgModel
summary(allVsMpgModel)
summary(allVsMpgModel)$coefficients
summary(autoVsMpgModel)$coefficients
summary(transVsMpgModel)$coefficients
allVsMpgModel <- glm(mpg ~ ., data = mtcars, family = poisson)
allVsMpgModel <- lm(mpg ~ ., data = mtcars)
dfbetas(allVsMpgModel)
dfbetas(allVsMpgModel)[1:10,2]
hatvalues(allVsMpgModel)
max(dfbetas(allVsMpgModel))
exp(7.244939)
log(7.244939)
(mtcars[mtcars$am == 1,1]
)
summary(mtcars[mtcars$am == 1,1])
library(car)
install.packages("car")
library(car)
vif(allVsMpgModel)
sqrt(vif(allVsMpgModel))
?mtcars
fit1 <- lm(mpg ~ factor(am), data = mtcars)
fit2 <- lm(mpg ~ factor(am) + wt, data = mtcars)
fit3 <- lm(mpg ~ factor(am) + wt + hp, data = mtcars)
fit4 <- lm(mpg ~ factor(am) + wt + hp + cyl + disp + vs + gear + carb, data = mtcars)
fit5 <- lm(mpg ~ ., data = mtcars)
anova(fit1, fit2, fit3, fit4, fit5)
anova(fit1, fit2, fit3, fit4, fit5)$coeffient
anova(fit1, fit2, fit3, fit4, fit5)$coeffients
?anova
pairs(mtcars)
simpleModel$fitted
simpleModel <- lm(mpg ~ factor(am), data = mtcars)
optimalModel <- lm(mpg ~ factor(am) + wt + hp, data = mtcars)
simpleModel$fitted
optimalModel$fitted
sumCoef <- summary(optimalModel)$coefficients
sumCoef
sumCoef[2,1] + c(-1,1) * qt(.975, df = optimalModel$df) * sumCoef[2,2]
a <- sumCoef[2,1] + c(-1,1) * qt(.975, df = optimalModel$df) * sumCoef[2,2]
a[1]
plot(lm(mpg ~ factor(am) + wt + hp, data = mtcars)
)
plot(lm(mpg ~ factor(am) + wt + hp, data = mtcars))
simpleModel <- lm(mpg ~ factor(am), data = mtcars)
plot(mtcars$am, mtcars$mpg, xaxt="n", xlab = "transmission type", ylab = "mpg", main = "transmission type vs mpg")
axis(1, at = c(0,1), labels = c("manual","automatic"))
lines(mtcars$am, simpleModel$fitted, col = "red")
legend("topleft", lty = 1, col=c("red"), legend = c("ac-only model"))
line(mtcars$am, optimalModel$fitted, col = "blue")
lines(mtcars$am, optimalModel$fitted, col = "blue")
mtcars$am
optimalModel
simpleModel <- lm(mpg ~ factor(am), data = mtcars)
> plot(mtcars$am, mtcars$mpg, xaxt="n", xlab = "transmission type", ylab = "mpg", main = "transmission type vs mpg")
> axis(1, at = c(0,1), labels = c("manual","automatic"))
> lines(mtcars$am, simpleModel$fitted, col = "red")
> legend("topleft", lty = 1, col=c("red"), legend = c("ac-only model"))
> line(mtcars$am, optimalModel$fitted, col = "blue")
plot(c(0,25), c(1,20))
simpleModel <- lm(mpg ~ factor(am), data = mtcars)
plot(mtcars$am, mtcars$mpg, xaxt="n", xlab = "transmission type", ylab = "mpg", main = "transmission type vs mpg")
axis(1, at = c(0,1), labels = c("manual","automatic"))
lines(mtcars$am, simpleModel$fitted, col = "red")
legend("topleft", lty = 1, col=c("red"), legend = c("ac-only model"))
abline((c(0,25), c(1,20)))
abline(c(0,25), c(1,20))
abline(c(0,25), c(1,20), col = "blue")
abline(c(0,25), c(10,20), col = "blue")
abline(c(15,0), c(25,1), col = "blue")
abline(c(25,1), c(15,0), col = "blue")
abline(c(25,1), c(15,2), col = "blue")
abline(c(25,1), c(15,2), col = "grey")
abline(c(25,1), c(25,2), col = "grey")
?abline
abline(28.58963286, -0.73575874)
abline(17.15, 2.08371013)
summary(simpleModel)$coefficients
summary(optimalModel)$coefficients
summary(optimalModel)$coefficients[2,1]
load("C:/THARRIS/Coursera/Regression Models/RegressionModels.Rmd")
summary(fit3)
summary(fit2)
summary(fit4)
?mtcars
rm(plot2)
setwd("C:/THARRIS/Coursera/Data Products/course-project/shiny")
setwd("C:/THARRIS/Coursera/Data Products/course-project")
broomfield.county.map <- readOGR(dsn = ".", layer = "Parcels")
broomfield.ward5.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-5"),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BATHS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BEDROOMS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$ACTUALYEAR),]
broomfield.county.map <- readOGR(dsn = ".", layer = "Parcels")
library(UsingR)
library(rgdal)
broomfield.county.map <- readOGR(dsn = ".", layer = "Parcels")
rm(plot2)
broomfield.ward5.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-5"),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BATHS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BEDROOMS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$ACTUALYEAR),]
broomfield.ward5.map@data$BATHS <- as.numeric(broomfield.ward5.map@data$BATHS)
a <- broomfield.ward5.map@data$BATHS
a <- broomfield.ward5.map@data
View(a)
broomfield.ward5.map <- broomfield.ward5.map[,c("OBJECTID","ACCOUNTNUM","BATHS","BEDROOMS","ACTUALYEAR","FINALACTUA","LANDACTUAL","LIVINGAREA","PROPERTYUS","SALEDATE","SALEPRICE")]
a <- broomfield.ward5.map@data
View(a)
broomfield.ward5.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-5"),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BATHS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BEDROOMS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$ACTUALYEAR),]
a <- broomfield.ward5.map@data
View(a)
broomfield.ward5.map <- broomfield.ward5.map[,c("OBJECTID","BATHS","BEDROOMS","ACTUALYEAR","FINALACTUA","LANDACTUAL","LIVINGAREA","PROPERTYUS","SALEDATE","SALEPRICE")]
b <- broomfield.ward5.map@data
View(b)
broomfield.ward5.map@data$BATHS <- as.numeric(broomfield.ward5.map@data$BATHS)
b <- broomfield.ward5.map@data
View(b)
broomfield.ward5.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-5"),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BATHS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BEDROOMS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$ACTUALYEAR),]
broomfield.ward5.map@data$BATHS <- as.numeric(as.character(broomfield.ward5.map@data$BATHS))
b <- broomfield.ward5.map@data
View(b)
runApp()
library(shiny)
runApp()
setwd("C:/THARRIS/Coursera/Data Products/course-project/shiny")
runApp()
broomfield.ward5.map <- broomfield.ward5.map[,c("OBJECTID","BATHS","BEDROOMS","ACTUALYEAR","FINALACTUA","LANDACTUAL","LIVINGAREA","PROPERTYUS","SALEDATE","SALEPRICE")]
b <- broomfield.ward5.map@data
View(b)
runApp()
runApp()
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BATHS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BEDROOMS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$ACTUALYEAR),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$LIVINGAREA),]
broomfield.ward5.map@data$BATHS <- as.numeric(as.character(broomfield.ward5.map@data$BATHS))
broomfield.ward5.map@data$BEDROOMS <- as.numeric(as.character(broomfield.ward5.map@data$BEDROOMS))
broomfield.ward5.map@data$ACTUALYEAR <- as.numeric(as.character(broomfield.ward5.map@data$ACTUALYEAR))
broomfield.ward5.map@data$LIVINGAREA <- as.numeric(as.character(broomfield.ward5.map@data$LIVINGAREA))
b <- broomfield.ward5.map@data
str(b)
broomfield.ward5.map@data$FINALACTUA <- as.numeric(as.character(broomfield.ward5.map@data$FINALACTUA))
b <- broomfield.ward5.map@data
str(b)
runApp()
FINALACTUA_INPUT <- c(350000,500000)
filterPlot <- broomfield.ward5.map[which(broomfield.ward5.map$FINALACTUA >= input$FINALACTUA_INPUT[1]),]
filterPlot <- broomfield.ward5.map[which(broomfield.ward5.map$FINALACTUA >= FINALACTUA_INPUT[1]),]
filterPlot <- filterPlot[which(filterPlot$FINALACTUA <= FINALACTUA_INPUT[2]),]
plot(filterPlot)
runApp()
broomfield.ward5.map@data$BATHS <- as.numeric(as.character(broomfield.ward5.map@data$BATHS))
broomfield.ward5.map@data$BEDROOMS <- as.numeric(as.character(broomfield.ward5.map@data$BEDROOMS))
broomfield.ward5.map@data$ACTUALYEAR <- as.numeric(as.character(broomfield.ward5.map@data$ACTUALYEAR))
broomfield.ward5.map@data$LIVINGAREA <- as.numeric(as.character(broomfield.ward5.map@data$LIVINGAREA))
broomfield.ward5.map@data$FINALACTUA <- as.numeric(as.character(broomfield.ward5.map@data$FINALACTUA))
broomfield.ward5.map@data$FINALACTUA
runApp()
writeOGR(broomfield.ward5.map, ".", "broomfield.ward5.map", driver="ESRI Shapefile")
setwd("C:/THARRIS/Coursera/Data Products/course-project")
writeOGR(broomfield.ward5.map, ".", "broomfield.ward5.map", driver="ESRI Shapefile")
source('C:/THARRIS/Coursera/Data Products/course-project/explore.R')
setwd("C:/THARRIS/Coursera/Data Products/course-project/shiny")
rm(list=ls())
setwd("C:/THARRIS/Coursera/Data Products/course-project")
broomfield.county.map <- readOGR(dsn = ".", layer = "broomfield.county.map")
getwd()
library(rgdal)
broomfield.county.map <- readOGR(dsn = ".", layer = "broomfield.county.map")
a <- readOGR(dsn = ".", layer = "broomfield.county.map")
setwd("C:/THARRIS/Coursera/Data Products/course-project")
library(rgdal)
# ingest our data
broomfield.county.map <- readOGR(dsn = ".", layer = "Parcels")
# decide which ward we want to look at, then filter our data
#' broomfield.ward1.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-1"),]
#' broomfield.ward2.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-2"),]
#' broomfield.ward3.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-3"),]
#' broomfield.ward4.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-4"),]
broomfield.ward5.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-5"),]
# drop incomplete records (and any non residential records)
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BATHS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$BEDROOMS),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$ACTUALYEAR),]
broomfield.ward5.map <- broomfield.ward5.map[!is.na(broomfield.ward5.map@data$LIVINGAREA),]
# convert our factors to numeric so that we can filter our results using sliders
broomfield.ward5.map@data$BATHS <- as.numeric(as.character(broomfield.ward5.map@data$BATHS))
broomfield.ward5.map@data$BEDROOMS <- as.numeric(as.character(broomfield.ward5.map@data$BEDROOMS))
broomfield.ward5.map@data$ACTUALYEAR <- as.numeric(as.character(broomfield.ward5.map@data$ACTUALYEAR))
broomfield.ward5.map@data$LIVINGAREA <- as.numeric(as.character(broomfield.ward5.map@data$LIVINGAREA))
broomfield.ward5.map@data$FINALACTUA <- as.numeric(as.character(broomfield.ward5.map@data$FINALACTUA))
broomfield.ward5.map <- broomfield.ward5.map[,c("OBJECTID","BATHS","BEDROOMS","ACTUALYEAR","FINALACTUA","LANDACTUAL","LIVINGAREA","PROPERTYUS","SALEDATE","SALEPRICE")]
writeOGR(broomfield.ward5.map, ".", "newparcel", driver="ESRI Shapefile")
broomfield.county.map <- readOGR(dsn = ".", layer = "Parcels")
a <- readOGR(dsn = ".", layer = "newparcels")
a <- readOGR(".", "newparcels")
a <- readOGR(".", "newparcel")
a <- readOGR(".", "newparcel")
source('C:/THARRIS/Coursera/Data Products/course-project/explore.R')
broomfield.county.map <- readOGR(dsn = ".", layer = "broomfield.county.map")
broomfield.ward5.map <- readOGR(dsn = ".", layer = "broomfield.ward5.map")
library(shiny)
runApp()
setwd("C:/THARRIS/Coursera/Data Products/course-project/shiny")
runApp()
runApp()
broomfield.ward.map <- broomfield.county.map[which(broomfield.county.map$WARD == "WARD-1"),]
broomfield.ward.map <- broomfield.ward.map[!is.na(broomfield.ward.map@data$BATHS),]
broomfield.ward.map <- broomfield.ward.map[!is.na(broomfield.ward.map@data$BEDROOMS),]
broomfield.ward.map <- broomfield.ward.map[!is.na(broomfield.ward.map@data$ACTUALYEAR),]
broomfield.ward.map <- broomfield.ward.map[!is.na(broomfield.ward.map@data$LIVINGAREA),]
broomfield.ward.map@data$BATHS <- as.numeric(as.character(broomfield.ward.map@data$BATHS))
broomfield.ward.map@data$BEDROOMS <- as.numeric(as.character(broomfield.ward.map@data$BEDROOMS))
broomfield.ward.map@data$ACTUALYEAR <- as.numeric(as.character(broomfield.ward.map@data$ACTUALYEAR))
broomfield.ward.map@data$LIVINGAREA <- as.numeric(as.character(broomfield.ward.map@data$LIVINGAREA))
broomfield.ward.map@data$FINALACTUA <- as.numeric(as.character(broomfield.ward.map@data$FINALACTUA))
broomfield.ward.map <- broomfield.ward.map[,c("OBJECTID","BATHS","BEDROOMS","ACTUALYEAR","FINALACTUA","LANDACTUAL","LIVINGAREA","PROPERTYUS","SALEDATE","SALEPRICE")]
writeOGR(broomfield.ward.map, ".", "broomfield.ward.map", driver="ESRI Shapefile")
source('C:/THARRIS/Coursera/Data Products/course-project/explore.R')
runApp()
setwd("C:/THARRIS/Coursera/Data Products/course-project/shiny")
runApp()
a <- broomfield.ward.map@data
View(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
library(sp)
spplot(broomfield.ward.map)
library(ggplot2)
ggplot(broomfield.ward.map)
ggplot(broomfield.ward.map@polygons)
library(shiny)
setwd("C:/THARRIS/Coursera/Data Products/course-project/shiny")
runApp()
runApp()
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
